using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Properties
{
    class Program
    {
        static void Main1(string[] args)
        {
            /*
            Program p = new Program();
            p.Display();
            */

            Class1 c1 = new Class1();
            //c1.i = 100;

            c1.i = ++c1.i + c1.i++ - c1.i-- - --c1.i;
            c1.Setx(10);
            Console.WriteLine(c1.Getx());
            Console.ReadLine();

        }

        static void Main(string[] args)
        {
            Class2 c2 = new Class2();
            c2.X = 1000;//set is called
            Console.WriteLine(c2.X);//get is called

            Console.ReadLine();

            //c2.P1 = "ab";
            Console.WriteLine(c2.P1);
            c2.P4 = 10;
            Console.WriteLine(c2.P4);
            Console.ReadLine();

        }

        /*
        public void Display()
        {
            Console.WriteLine("Display");
        }
        */
    }


    public class Class1
    {
        public int i; //field

        private int x;
        public void Setx(int VALUE)
        {
            if(VALUE < 10)
            {
                x = VALUE;
            }
            else
            {
                Console.WriteLine("Invalid Value for x ");
            }

           
        }
        public int Getx()
        {
            return x;
        }
    }

    public class Class2
    {
        private int x;
        public int X
        {
            set
            {
                //value is the right hand side of c2.X = 10;
                //it is taking integer value as value inside if becoz X is declared as int
                if(value < 100)
                {
                    x = value;

                }
                else
                {
                    Console.WriteLine("INVALID value for x");
                }

            }
            get
            {
                return x;
            }
        }

        private string p1 = "abc";
        public string P1 //readonly property
        {
            get
            {
                return p1;
            }
        }

        private int p2;
        public int P2
        {
            set
            {
                p2 = value;

            }
            get
            {
                return p2;
            }
        }

        public int P3;


        //Autotmatic property -- use it when there are no validations
        //get and set code is generated by ccompiler
        //private variable is generated by compiler
        public int P4 { get; set; }

        private int p5;

        //only one of get/set can have a property accessor
        //you can only reduce access, not increase it
        public int P5
        {
            private set //property accessor
            {
                p5 = value;
            }
            get
            {
                return p5;
            }
        }
    }
}
